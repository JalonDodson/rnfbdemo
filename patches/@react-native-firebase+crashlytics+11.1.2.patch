diff --git a/node_modules/@react-native-firebase/crashlytics/lib/handlers.js b/node_modules/@react-native-firebase/crashlytics/lib/handlers.js
index 487f0fe..308bd9e 100644
--- a/node_modules/@react-native-firebase/crashlytics/lib/handlers.js
+++ b/node_modules/@react-native-firebase/crashlytics/lib/handlers.js
@@ -15,10 +15,13 @@
  *
  */
 
+import { firebase } from '@react-native-firebase/app';
 import { isError, once } from '@react-native-firebase/app/lib/common';
 import tracking from 'promise/setimmediate/rejection-tracking';
 import StackTrace from 'stacktrace-js';
 
+export const FATAL_FLAG = 'com.firebase.crashlytics.reactnative.fatal';
+
 export function createNativeErrorObj(error, stackFrames, isUnhandledRejection, jsErrorName) {
   const nativeObj = {};
 
@@ -78,6 +81,26 @@ export const setGlobalErrorHandler = once(nativeModule => {
     if (nativeModule.isErrorGenerationOnJSCrashEnabled) {
       try {
         const stackFrames = await StackTrace.fromError(error, { offline: true });
+
+        // Flag the Crashlytics backend that we have a fatal error, they will transform it
+        await nativeModule.setAttribute(FATAL_FLAG, Math.floor(Date.now() / 1000)); // "current UNIX time"
+
+        // Notify analytics, if it exists - throws error if not
+        try {
+          await firebase
+            .app()
+            .analytics()
+            .logEvent(
+              '_ae', // '_ae' is a reserved analytics value for firebase
+              {
+                fatal: 1, // as in firebase-android-sdk
+                timestamp: Math.floor(Date.now() / 1000), // 'long timestamp', is that current UNIX time?
+              },
+            );
+        } catch (_) {
+          // This just means analytics was not present, so we could not log the analytics event
+        }
+
         await nativeModule.recordErrorPromise(createNativeErrorObj(error, stackFrames, false));
       } catch (_) {
         // do nothing
